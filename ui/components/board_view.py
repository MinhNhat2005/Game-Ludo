# ui/components/board_view.py
import pygame
from core import rules
from utils.constants import WIDTH, HEIGHT, RED, BLUE, GREEN, YELLOW, WHITE, BLACK, PLAYER_COLORS, DICE_POSITIONS, FONT
from ui.components.dice_view import DiceView

CELL = 50
BOARD_SIZE = 15

class BoardView:
    def __init__(self, screen, game_manager, players):
        self.screen = screen
        self.gm = game_manager
        self.players = players
        self.clock = pygame.time.Clock()
        self.msg = "Click x√∫c x·∫Øc ƒë·ªÉ b·∫Øt ƒë·∫ßu!"
        self.last_roll = None
        self.highlight_cells = []  # üåü danh s√°ch √¥ c·∫ßn t√¥ s√°ng

        # kh·ªüi t·∫°o x√∫c x·∫Øc
        self.dices = []
        for pid, color in enumerate(PLAYER_COLORS[:self.gm.num_players]):
            x, y = DICE_POSITIONS[pid]
            self.dices.append(DiceView(x, y, color, pid))

        self.start_x = (WIDTH - CELL * BOARD_SIZE) // 2
        self.start_y = (HEIGHT - CELL * BOARD_SIZE) // 2

    # ==========================================================
    #  V·∫º B√ÄN C·ªú
    # ==========================================================
    # Trong file: ui/components/board_view.py

    def draw_board_layout(self):
        """V·∫Ω chu·ªìng 4 m√†u, v√≤ng tr√≤n ch·ªù, v√† √¥ trung t√¢m 3x3 l√†m ƒê√çCH."""
        self.screen.fill(WHITE)
        sx, sy = self.start_x, self.start_y

        # === 4 chu·ªìng m√†u (6x6) === (Kh√¥ng thay ƒë·ªïi)
        homes = [
            (sx, sy, GREEN),
            (sx + 9*CELL, sy, BLUE),
            (sx + 9*CELL, sy + 9*CELL, YELLOW),
            (sx, sy + 9*CELL, RED)
        ]
        for x, y, color in homes:
            pygame.draw.rect(self.screen, color, (x, y, 6*CELL, 6*CELL))
            pygame.draw.rect(self.screen, BLACK, (x, y, 6*CELL, 6*CELL), 4)

        # === 4 v√≤ng tr√≤n trong chu·ªìng (ch·ªó ch·ªù qu√¢n) === (Kh√¥ng thay ƒë·ªïi)
        offsets = [(1.5, 1.5), (10.5, 1.5), (10.5, 10.5), (1.5, 10.5)]
        for pid, (ox, oy) in enumerate(offsets):
            color = PLAYER_COLORS[pid]
            for i in range(4):
                px = int(self.start_x + (ox + (i % 2) * 2) * CELL)
                py = int(self.start_y + (oy + (i // 2) * 2) * CELL)
                pygame.draw.circle(self.screen, WHITE, (px, py), 18)
                pygame.draw.circle(self.screen, color, (px, py), 4)

        # === Trung t√¢m 9 √¥ (3x3) - v·∫Ω n·ªÅn v√† vi·ªÅn tr∆∞·ªõc === (Kh√¥ng thay ƒë·ªïi)
        cx = sx + 6 * CELL
        cy = sy + 6 * CELL
        for i in range(3):
            for j in range(3):
                rect = pygame.Rect(cx + i*CELL, cy + j*CELL, CELL, CELL)
                pygame.draw.rect(self.screen, WHITE, rect)
                pygame.draw.rect(self.screen, BLACK, rect, 1)

        # === V·∫Ω 4 tam gi√°c m√†u ƒê√çCH (ƒê√É C·∫¨P NH·∫¨T M√ÄU S·∫ÆC) ===
        mid_point = (cx + 1.5 * CELL, cy + 1.5 * CELL)
        top_left = (cx, cy)
        top_right = (cx + 3 * CELL, cy)
        bottom_left = (cx, cy + 3 * CELL)
        bottom_right = (cx + 3 * CELL, cy + 3 * CELL)

        # H∆∞·ªõng v·ªÅ ƒë√≠ch m·ªõi:
        # - Tr√™n -> D∆∞·ªõi: BLUE
        # - Ph·∫£i -> Tr√°i: YELLOW
        # - D∆∞·ªõi -> L√™n: RED
        # - Tr√°i -> Ph·∫£i: GREEN
        pygame.draw.polygon(self.screen, BLUE,   [top_left, top_right, mid_point])
        pygame.draw.polygon(self.screen, YELLOW, [top_right, bottom_right, mid_point])
        pygame.draw.polygon(self.screen, RED,    [bottom_right, bottom_left, mid_point])
        pygame.draw.polygon(self.screen, GREEN,  [bottom_left, top_left, mid_point])

    def draw_path(self):
        """
        V·∫Ω ƒë∆∞·ªùng ƒëi v√† c√°c th√†nh ph·∫ßn tr√™n b√†n c·ªù.
        T·∫•t c·∫£ t·ªça ƒë·ªô ƒë∆∞·ª£c l·∫•y t·ª´ self.gm.board ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng b·ªô.
        """
        sx, sy = self.start_x, self.start_y
        c = CELL
        path_color = (230, 230, 230)
        
        # L·∫•y ƒë∆∞·ªùng ƒëi 52 √¥ CHU·∫®N t·ª´ logic ƒë·ªÉ v·∫Ω
        main_path_from_logic = self.gm.board.path_grid
        for gx, gy in main_path_from_logic:
            pygame.draw.rect(self.screen, path_color, (sx + gx*c, sy + gy*c, c, c))
            pygame.draw.rect(self.screen, BLACK, (sx + gx*c, sy + gy*c, c, c), 1)

        # L·∫•y 4 ƒë∆∞·ªùng v·ªÅ ƒë√≠ch CHU·∫®N t·ª´ logic ƒë·ªÉ v·∫Ω
        home_lanes_from_logic = self.gm.board.home_lanes
        for pid, lane in enumerate(home_lanes_from_logic):
            color = PLAYER_COLORS[pid]
            for gx, gy in lane:
                pygame.draw.rect(self.screen, color, (sx + gx*c, sy + gy*c, c, c))
                pygame.draw.rect(self.screen, BLACK, (sx + gx*c, sy + gy*c, c, c), 2)
        
        # L·∫•y 4 √¥ xu·∫•t ph√°t CHU·∫®N t·ª´ logic ƒë·ªÉ v·∫Ω
        for pid in range(self.gm.num_players):
            gx, gy = self.gm.board.get_spawn_cell(pid)
            color = PLAYER_COLORS[pid]
            center_x = sx + int(gx * c + c / 2)
            center_y = sy + int(gy * c + c / 2)
            pygame.draw.circle(self.screen, color, (center_x, center_y), 10)
            pygame.draw.circle(self.screen, WHITE, (center_x, center_y), 10, 2)

    # ==========================================================
    #  T√î S√ÅNG √î KH·∫¢ THI
    # ==========================================================
    def draw_highlight(self):
        """T√¥ s√°ng c√°c √¥ qu√¢n c√≥ th·ªÉ di chuy·ªÉn t·ªõi"""
        for gx, gy in self.highlight_cells:
            px = self.start_x + gx * CELL
            py = self.start_y + gy * CELL
            rect = pygame.Rect(px, py, CELL, CELL)
            # D√πng surface ƒë·ªÉ v·∫Ω highlight b√°n trong su·ªët
            highlight_surface = pygame.Surface((CELL, CELL), pygame.SRCALPHA)
            highlight_surface.fill((255, 255, 0, 100)) # V√†ng, 100/255 ƒë·ªô trong su·ªët
            self.screen.blit(highlight_surface, (px, py))
            pygame.draw.rect(self.screen, (255, 200, 0), rect, 3)  # vi·ªÅn v√†ng ƒë·∫≠m

   # Trong file: ui/components/board_view.py

    # ==========================================================
    #  X·ª¨ L√ù S·ª∞ KI·ªÜN
    # ==========================================================
    def handle_events(self, event): # <--- TH√äM 'event' V√ÄO ƒê√ÇY
        # V√≤ng l·∫∑p "for e in pygame.event.get():" ƒë√£ ƒë∆∞·ª£c X√ìA
        # v√¨ b√¢y gi·ªù ch√∫ng ta x·ª≠ l√Ω t·ª´ng s·ª± ki·ªán ƒë∆∞·ª£c truy·ªÅn v√†o.
        if event.type == pygame.QUIT:
            pygame.quit()
            raise SystemExit()

        if event.type == pygame.MOUSEBUTTONDOWN:
            mx, my = event.pos # S·ª≠ d·ª•ng tr·ª±c ti·∫øp 'event.pos'
            current = self.gm.turn

            # --- 1Ô∏è‚É£ Gieo x√∫c x·∫Øc ---
            if self.gm.dice_value is None:
                dice_of_current_player = self.dices[current]
                if dice_of_current_player.clicked((mx, my)):
                    val = dice_of_current_player.roll()
                    self.last_roll = val
                    self.msg = f"Ng∆∞·ªùi {current+1} gieo ƒë∆∞·ª£c {val}"
                    self.gm.dice_value = val
                    self.highlight_cells.clear()

                    movable_pieces = self.gm.get_movable_pieces(current, val)

                    if movable_pieces:
                        self.msg += " ‚Üí Ch·ªçn qu√¢n ƒë·ªÉ di chuy·ªÉn"
                        for piece in movable_pieces:
                            dest_cell = self.gm.get_destination_cell(piece, val)
                            if dest_cell:
                                self.highlight_cells.append(dest_cell)
                    else:
                        self.msg += ". Kh√¥ng c√≥ qu√¢n n√†o c√≥ th·ªÉ ƒëi."
                        if val != 6:
                            self.gm.next_turn()
                        else:
                            self.gm.dice_value = None
                    return

            # --- 2Ô∏è‚É£ B·∫•m ch·ªçn √¥ ƒë√£ ƒë∆∞·ª£c highlight ƒë·ªÉ di chuy·ªÉn qu√¢n ---
            if self.highlight_cells:
                gx = (mx - self.start_x) // CELL
                gy = (my - self.start_y) // CELL

                if (gx, gy) in self.highlight_cells:
                    piece_to_move = self.gm.find_piece_for_move(current, (gx, gy))
                    if piece_to_move:
                        kick_msg = self.gm.move_piece(piece_to_move)
                        
                        base_msg = f"Ng∆∞·ªùi {current+1} ƒë√£ di chuy·ªÉn qu√¢n."
                        if kick_msg:
                            self.msg = base_msg + kick_msg
                        else:
                            self.msg = base_msg
                        
                        self.highlight_cells.clear()
                        return

    # ==========================================================
    #  V·∫º TO√ÄN B·ªò
    # ==========================================================
    def draw(self):
        self.draw_board_layout()
        self.draw_path()
        self.draw_highlight()

        # --- V·∫Ω qu√¢n c·ªù ---
        # T·ªça ƒë·ªô offset cho c√°c v·ªã tr√≠ trong chu·ªìng, gi·ªëng trong draw_board_layout
        home_offsets = [(1.5, 1.5), (10.5, 1.5), (10.5, 10.5), (1.5, 10.5)]

        for pid in range(self.gm.num_players):
            pieces_of_player = self.gm.players[pid]
            player_color = PLAYER_COLORS[pid]

            for piece in pieces_of_player:
                if piece.finished:
                    continue  # B·ªè qua c√°c qu√¢n ƒë√£ v·ªÅ ƒë√≠ch

                px, py = 0, 0 # Kh·ªüi t·∫°o t·ªça ƒë·ªô pixel

                if piece.path_index == -1:
                    # TR∆Ø·ªúNG H·ª¢P 1: Qu√¢n c·ªù ƒëang ·ªü trong chu·ªìng
                    ox, oy = home_offsets[pid]
                    # Gi·∫£ ƒë·ªãnh piece c√≥ thu·ªôc t√≠nh .id (t·ª´ 0 ƒë·∫øn 3)
                    px = int(self.start_x + (ox + (piece.id % 2) * 2) * CELL)
                    py = int(self.start_y + (oy + (piece.id // 2) * 2) * CELL)
                else:
                    # TR∆Ø·ªúNG H·ª¢P 2: Qu√¢n c·ªù ƒëang ·ªü tr√™n ƒë∆∞·ªùng ƒëi
                    path = self.gm.board.get_path_for_player(pid)
                    if piece.path_index < len(path):
                        gx, gy = path[piece.path_index]
                        # T√≠nh t·ªça ƒë·ªô t√¢m c·ªßa √¥ c·ªù ƒë·ªÉ v·∫Ω h√¨nh tr√≤n
                        px = self.start_x + gx * CELL + CELL // 2
                        py = self.start_y + gy * CELL + CELL // 2
                    else:
                        continue # Safeguard, b·ªè qua n·∫øu path_index kh√¥ng h·ª£p l·ªá

                # B√¢y gi·ªù ti·∫øn h√†nh v·∫Ω qu√¢n c·ªù v·ªõi t·ªça ƒë·ªô ƒë√£ t√≠nh to√°n
                pygame.draw.circle(self.screen, player_color, (px, py), 18)
                pygame.draw.circle(self.screen, BLACK, (px, py), 18, 2)

                # (T√πy ch·ªçn) V·∫Ω s·ªë th·ª© t·ª± l√™n qu√¢n c·ªù cho d·ªÖ ph√¢n bi·ªát
                id_font = pygame.font.Font(None, 24)
                id_text = id_font.render(str(piece.id + 1), True, WHITE)
                text_rect = id_text.get_rect(center=(px, py))
                self.screen.blit(id_text, text_rect)


        # --- V·∫Ω c√°c th√†nh ph·∫ßn kh√°c ---
        # X√∫c x·∫Øc
        for i, dice in enumerate(self.dices):
            dice.active = (i == self.gm.turn)
            dice.draw(self.screen)

        # Th√¥ng b√°o tr·∫°ng th√°i
        msg_render = FONT.render(self.msg, True, BLACK)
        self.screen.blit(msg_render, (20, HEIGHT - 40))

        pygame.display.flip()
        self.clock.tick(60)


    def update_dice_display(self, player_id, value):
        """C·∫≠p nh·∫≠t giao di·ªán c·ªßa m·ªôt vi√™n x√∫c x·∫Øc c·ª• th·ªÉ."""
        if 0 <= player_id < len(self.dices):
            self.dices[player_id].set_value(value)


    def draw_from_state(self, game_state):
        """V·∫Ω b√†n c·ªù v√† qu√¢n c·ªù d·ª±a tr√™n dictionary game_state."""
        
        # --- V·∫Ω Layout B√†n C·ªù v√† ƒê∆∞·ªùng ƒêi ---
        # Nh·ªØng ph·∫ßn n√†y kh√¥ng ƒë·ªïi d·ª±a tr√™n game_state, n√™n g·ªçi h√†m c≈©
        self.draw_board_layout()
        self.draw_path()
        # self.draw_highlight() # Logic highlight c√≥ th·ªÉ c·∫ßn ph·ªëi h·ª£p server sau

        # --- V·∫Ω Qu√¢n C·ªù d·ª±a tr√™n game_state ---
        players_pieces_data = game_state.get('players_pieces', [])
        home_offsets = [(1.5, 1.5), (10.5, 1.5), (10.5, 10.5), (1.5, 10.5)] # Gi·ªØ logic n√†y

        for pid, pieces_data in enumerate(players_pieces_data):
            player_color = PLAYER_COLORS[pid]
            for piece_data in pieces_data:
                path_index = piece_data.get('path_index', -1)
                is_finished = piece_data.get('finished', False)
                piece_id = piece_data.get('id', -1) # L·∫•y ID qu√¢n c·ªù

                if is_finished:
                    continue # B·ªè qua qu√¢n ƒë√£ v·ªÅ ƒë√≠ch

                px, py = 0, 0
                if path_index == -1:
                    # Qu√¢n c·ªù trong chu·ªìng
                    if pid < len(home_offsets): # Ki·ªÉm tra an to√†n
                        ox, oy = home_offsets[pid]
                        if piece_id != -1: # ƒê·∫£m b·∫£o ID h·ª£p l·ªá
                            px = int(self.start_x + (ox + (piece_id % 2) * 2) * CELL)
                            py = int(self.start_y + (oy + (piece_id // 2) * 2) * CELL)
                        else: continue # B·ªè qua n·∫øu ID kh√¥ng h·ª£p l·ªá
                else:
                    # Qu√¢n c·ªù tr√™n ƒë∆∞·ªùng ƒëi ho·∫∑c ƒë∆∞·ªùng v·ªÅ ƒë√≠ch
                    # Ch√∫ng ta c·∫ßn logic c·ªßa Board, truy c·∫≠p qua GameManager n·∫øu c√≥
                    # Ho·∫∑c, t·ªët h∆°n, server g·ª≠i th·∫≥ng t·ªça ƒë·ªô pixel
                    # Hi·ªán t·∫°i, gi·∫£ s·ª≠ c√≥ th·ªÉ l·∫•y path t·ª´ m·ªôt instance board c·ª•c b·ªô
                    # PH·∫¶N N√ÄY KH√Å PH·ª®C T·∫†P n·∫øu kh√¥ng t√°i c·∫•u tr√∫c nhi·ªÅu h∆°n.
                    # C√≥ th·ªÉ c·∫ßn m·ªôt board c·ª•c b·ªô t·∫°m th·ªùi, ho·∫∑c server g·ª≠i t·ªça ƒë·ªô.
                    # Th·ª≠ l·∫•y path t·ª´ instance board d√πng chung/t·∫°m:
                    if self.gm and self.gm.board: # Ki·ªÉm tra gm v√† board c√≥ t·ªìn t·∫°i
                       path = self.gm.board.get_path_for_player(pid)
                       if path_index < len(path):
                           gx, gy = path[path_index]
                           px = self.start_x + gx * CELL + CELL // 2
                           py = self.start_y + gy * CELL + CELL // 2
                       else: continue # path_index kh√¥ng h·ª£p l·ªá
                    else: continue # Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠

                # V·∫Ω qu√¢n c·ªù
                pygame.draw.circle(self.screen, player_color, (px, py), 18)
                pygame.draw.circle(self.screen, BLACK, (px, py), 18, 2)
                # T√πy ch·ªçn: V·∫Ω ID qu√¢n c·ªù
                if piece_id != -1:
                    id_font = pygame.font.Font(None, 24)
                    id_text = id_font.render(str(piece_id + 1), True, WHITE)
                    text_rect = id_text.get_rect(center=(px, py))
                    self.screen.blit(id_text, text_rect)

        # --- V·∫Ω X√∫c X·∫Øc d·ª±a tr√™n game_state ---
        dice_val = game_state.get('dice_value')
        current_turn = game_state.get('turn', -1)

        for i, dice in enumerate(self.dices):
            dice.active = (i == current_turn) # Highlight x√∫c x·∫Øc ƒë√∫ng
            if i == current_turn and dice_val is not None:
                dice.set_value(dice_val) # ƒê·∫∑t gi√° tr·ªã t·ª´ server
            elif not dice.active:
                 dice.set_value(1) # Reset x√∫c x·∫Øc kh√¥ng ho·∫°t ƒë·ªông (t√πy ch·ªçn)

            dice.draw(self.screen) # V·∫Ω x√∫c x·∫Øc

        # --- V·∫Ω Th√¥ng B√°o Tr·∫°ng Th√°i ---
        # Th√¥ng b√°o gi·ªù ƒë∆∞·ª£c x·ª≠ l√Ω ch√≠nh b·ªüi v√≤ng l·∫∑p client
        # msg_render = FONT.render(self.msg, True, BLACK)
        # self.screen.blit(msg_render, (20, HEIGHT - 40))